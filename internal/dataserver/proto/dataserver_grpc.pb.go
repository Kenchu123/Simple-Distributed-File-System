// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dataserver.proto

package dataserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServerClient is the client API for DataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerClient interface {
	GetFileBlock(ctx context.Context, in *GetFileBlockRequest, opts ...grpc.CallOption) (*GetFileBlockReply, error)
	GetFileBlocks(ctx context.Context, in *GetFileBlocksRequest, opts ...grpc.CallOption) (*GetFileBlocksReply, error)
	PutFileBlock(ctx context.Context, in *PutFileBlockRequest, opts ...grpc.CallOption) (*PutFileBlockReply, error)
	CommitFileBlock(ctx context.Context, in *CommitFileBlockRequest, opts ...grpc.CallOption) (*CommitFileBlockReply, error)
}

type dataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerClient(cc grpc.ClientConnInterface) DataServerClient {
	return &dataServerClient{cc}
}

func (c *dataServerClient) GetFileBlock(ctx context.Context, in *GetFileBlockRequest, opts ...grpc.CallOption) (*GetFileBlockReply, error) {
	out := new(GetFileBlockReply)
	err := c.cc.Invoke(ctx, "/dataserver.DataServer/GetFileBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetFileBlocks(ctx context.Context, in *GetFileBlocksRequest, opts ...grpc.CallOption) (*GetFileBlocksReply, error) {
	out := new(GetFileBlocksReply)
	err := c.cc.Invoke(ctx, "/dataserver.DataServer/GetFileBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) PutFileBlock(ctx context.Context, in *PutFileBlockRequest, opts ...grpc.CallOption) (*PutFileBlockReply, error) {
	out := new(PutFileBlockReply)
	err := c.cc.Invoke(ctx, "/dataserver.DataServer/PutFileBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) CommitFileBlock(ctx context.Context, in *CommitFileBlockRequest, opts ...grpc.CallOption) (*CommitFileBlockReply, error) {
	out := new(CommitFileBlockReply)
	err := c.cc.Invoke(ctx, "/dataserver.DataServer/CommitFileBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServerServer is the server API for DataServer service.
// All implementations must embed UnimplementedDataServerServer
// for forward compatibility
type DataServerServer interface {
	GetFileBlock(context.Context, *GetFileBlockRequest) (*GetFileBlockReply, error)
	GetFileBlocks(context.Context, *GetFileBlocksRequest) (*GetFileBlocksReply, error)
	PutFileBlock(context.Context, *PutFileBlockRequest) (*PutFileBlockReply, error)
	CommitFileBlock(context.Context, *CommitFileBlockRequest) (*CommitFileBlockReply, error)
	mustEmbedUnimplementedDataServerServer()
}

// UnimplementedDataServerServer must be embedded to have forward compatible implementations.
type UnimplementedDataServerServer struct {
}

func (UnimplementedDataServerServer) GetFileBlock(context.Context, *GetFileBlockRequest) (*GetFileBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileBlock not implemented")
}
func (UnimplementedDataServerServer) GetFileBlocks(context.Context, *GetFileBlocksRequest) (*GetFileBlocksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileBlocks not implemented")
}
func (UnimplementedDataServerServer) PutFileBlock(context.Context, *PutFileBlockRequest) (*PutFileBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFileBlock not implemented")
}
func (UnimplementedDataServerServer) CommitFileBlock(context.Context, *CommitFileBlockRequest) (*CommitFileBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitFileBlock not implemented")
}
func (UnimplementedDataServerServer) mustEmbedUnimplementedDataServerServer() {}

// UnsafeDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServer will
// result in compilation errors.
type UnsafeDataServerServer interface {
	mustEmbedUnimplementedDataServerServer()
}

func RegisterDataServerServer(s grpc.ServiceRegistrar, srv DataServerServer) {
	s.RegisterService(&DataServer_ServiceDesc, srv)
}

func _DataServer_GetFileBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetFileBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataserver.DataServer/GetFileBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetFileBlock(ctx, req.(*GetFileBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetFileBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetFileBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataserver.DataServer/GetFileBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetFileBlocks(ctx, req.(*GetFileBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_PutFileBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).PutFileBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataserver.DataServer/PutFileBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).PutFileBlock(ctx, req.(*PutFileBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_CommitFileBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFileBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).CommitFileBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataserver.DataServer/CommitFileBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).CommitFileBlock(ctx, req.(*CommitFileBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServer_ServiceDesc is the grpc.ServiceDesc for DataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataserver.DataServer",
	HandlerType: (*DataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileBlock",
			Handler:    _DataServer_GetFileBlock_Handler,
		},
		{
			MethodName: "GetFileBlocks",
			Handler:    _DataServer_GetFileBlocks_Handler,
		},
		{
			MethodName: "PutFileBlock",
			Handler:    _DataServer_PutFileBlock_Handler,
		},
		{
			MethodName: "CommitFileBlock",
			Handler:    _DataServer_CommitFileBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataserver.proto",
}
